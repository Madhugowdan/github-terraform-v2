name: "Terraform action"
on:
  push:
    branches:
      - main
jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    # env:
    #    TF_VAR_AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #    TF_VAR_AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    defaults:
      run:
        shell: bash
        working-directory: terraform-code
    steps:
      - name: Git checkout
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
# 
      # - name: Configure AWS credentials
      #   run: echo ${{ secrets.AWS_ACCESS_KEY_ID }} ${{ secrets.AWS_SECRET_ACCESS_KEY }} ${{ secrets.AWS_REGION }} > ~/.aws/credentials

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.5

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init 
        env:
          TF_VAR_AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
       # if: github.event_name == 'pull_request'
        env:
          TF_VAR_AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
        continue-on-error: true

    #   - uses: actions/github-script@v6
    #    # if: github.event_name == 'pull_request'
    #     env:
    #       PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
    #     with:
    # #      github-token: ${{ secrets.GITHUB_TOKEN }}
    #       script: |
    #         const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
    #         #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
    #         #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
    #         <details><summary>Validation Output</summary>
    #         \`\`\`\n
    #         ${{ steps.validate.outputs.stdout }}
    #         \`\`\`
    #         </details>
    #         #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
    #         <details><summary>Show Plan</summary>
    #         \`\`\`\n
    #         ${process.env.PLAN}
    #         \`\`\`
    #         </details>
    #         *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
    #         github.rest.issues.createComment({
    #           issue_number: context.issue.number,
    #           owner: context.repo.owner,
    #           repo: context.repo.repo,
    #           body: output
    #         })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false